#include "MobileHZB.ush"

Texture2D ParentTextureMip;
SamplerState ParentTextureMipSampler;

float2 ParentTextureInvSize;
uint2 ViewRectSizeMinsOne;

#if PIXELSHADER
void HZBBuildPS
(
    float4 SvPosition : SV_POSITION, 
    out float4 OutColor : SV_Target0
)
{
    float4 DeviceZ;
	//直接求对应父贴图中心点位置, 然后GatherTexture全采样. 
	//同时防止采样ViewRect外的Pixel, 先加因为Gather会自动偏移像素
    const uint2 PixelCoord = min(floor(SvPosition.xy) * 2 + uint2(1, 1), ViewRectSizeMinsOne) ;
    float2 UV = ParentTextureInvSize * PixelCoord;
#if UseSceneDepth
    DeviceZ = ParentTextureMip.GatherRed(ParentTextureMipSampler, UV, 0);
#else
    DeviceZ = ParentTextureMip.GatherAlpha(ParentTextureMipSampler, UV, 0);
#endif
    float FurthestDeviceZ = min(min(DeviceZ.x, DeviceZ.y), min(DeviceZ.z, DeviceZ.w));

    OutColor = FurthestDeviceZ;
}

#elif 1

uint SignedRightShift(uint x, const int bitshift)
{
    if (bitshift > 0)
    {
        return x << asuint(bitshift);
    }
    else if (bitshift < 0)
    {
        return x >> asuint(-bitshift);
    }
    return x;
}

// Returns the pixel pos [[0; N[[^2 in a two dimensional tile size of N=2^TileSizeLog2, to
// store at a given SharedArrayId in [[0; N^2[[, so that a following recursive 2x2 pixel
// block reduction stays entirely LDS memory banks coherent.
uint2 InitialTilePixelPositionForReduction2x2(const uint TileSizeLog2, uint SharedArrayId)
{
    uint x = 0;
    uint y = 0;

    [unroll]
    for (uint i = 0; i < TileSizeLog2; i++)
    {
        const uint DestBitId = TileSizeLog2 - 1 - i;
        const uint DestBitMask = 1 << DestBitId;
        x |= DestBitMask & SignedRightShift(SharedArrayId, int(DestBitId) - int(i * 2 + 0));
        y |= DestBitMask & SignedRightShift(SharedArrayId, int(DestBitId) - int(i * 2 + 1));
    }

#if 0
	const uint N = 1 << TileSizeLog2;
	return uint2(SharedArrayId / N, SharedArrayId - N * (SharedArrayId / N));
#endif

    return uint2(x, y);
}

//1024x512
#define GROUP_TILE_SIZE 8
#define MAX_MIP_BATCH_SIZE 4

RWTexture2D<float> FurthestMipOutput_0;
RWTexture2D<float> FurthestMipOutput_1;
RWTexture2D<float> FurthestMipOutput_2;
RWTexture2D<float> FurthestMipOutput_3;
groupshared float SharedFurthestDeviceZ[GROUP_TILE_SIZE * GROUP_TILE_SIZE]; //Linear Array

[numthreads(GROUP_TILE_SIZE, GROUP_TILE_SIZE, 1)]
void HZBBuildCS(uint GroupThreadIndex : SV_GroupIndex, uint2 GroupId : SV_GroupID/*, uint2 DispatchThreadId : SV_DispatchThreadID*/)
{
    //Calculate DispatchThreadId
    uint2 GroupThreadId = InitialTilePixelPositionForReduction2x2(MAX_MIP_BATCH_SIZE - 1, GroupThreadIndex);
    uint2 DispatchThreadId = GROUP_TILE_SIZE * GroupId + GroupThreadId;
    
    //Calculate UV
    uint2 PixelCoord = min(DispatchThreadId * 2 + uint2(1, 1), ViewRectSizeMinsOne);
    float2 UV = ParentTextureInvSize * PixelCoord;
    float4 DevicesZ = ParentTextureMip.GatherRed(ParentTextureMipSampler, UV);
    
    // NOTE: For 16-bit HZB buffers we should be careful about rounding in the right direction for Min/Max.
	// fp32 -> fp16 rounds towards zero in DirectX so the "min" HZB will be conservative for positive values,
	// which is the common case for culling. Special care would be needed here to ensure that this quantization
	// is fully conservative for the "max" HZB and/or negative numbers, but this is not currently necessary.
    float MinDeviceZ = min(min(DevicesZ.x, DevicesZ.y), min(DevicesZ.z, DevicesZ.w));
    FurthestMipOutput_0[DispatchThreadId] = MinDeviceZ;
    SharedFurthestDeviceZ[GroupThreadIndex] = MinDeviceZ;  

    //解决Bank Confliction,不同Thread访问相邻数据而不是同Thread直接访问相邻数据, 一个Thread内串行访问无所谓
    //那么需要满足的条件是不同Thread取出来的数据最好不要Bank冲突
    //同样不知道对应设备的BankSize, 一般为16或32
    [unroll]
    for (uint MipLevel = 1; MipLevel < DIM_MIP_LEVEL_COUNT; ++MipLevel)
    {
        GroupMemoryBarrierWithGroupSync();  
        const uint TileSize = GROUP_TILE_SIZE >> MipLevel;
        const uint ReduceBankSize = TileSize * TileSize;
        DispatchThreadId >>= 1;
        [branch]
        if (GroupThreadIndex < ReduceBankSize)
        {
            uint4 LDSIndex = GroupThreadIndex + uint4(0, 1, 2, 3) * ReduceBankSize;
            float4 FurthestDeviceZ = float4(SharedFurthestDeviceZ[LDSIndex.x], SharedFurthestDeviceZ[LDSIndex.y], SharedFurthestDeviceZ[LDSIndex.z], SharedFurthestDeviceZ[LDSIndex.w]);
            MinDeviceZ = min(min(FurthestDeviceZ.x, FurthestDeviceZ.y), min(FurthestDeviceZ.z, FurthestDeviceZ.w));

            if (MipLevel == 1)
            {
                FurthestMipOutput_1[DispatchThreadId] = MinDeviceZ;
            }
            else if (MipLevel == 2)
            {
                FurthestMipOutput_2[DispatchThreadId] = MinDeviceZ;
            }
            else if (MipLevel == 3)
            {
                FurthestMipOutput_3[DispatchThreadId] = MinDeviceZ;
            }
        }
        //我们不知道Mobile上一个Wavefront有多大
        GroupMemoryBarrierWithGroupSync();
        SharedFurthestDeviceZ[GroupThreadIndex] = MinDeviceZ;
    }
}
#endif