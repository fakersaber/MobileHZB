#include "Common.ush"
#include "ReductionCommon.ush"




#if PIXELSHADER

float4 HZBInvDeviceZToWorldZTransform;

Texture2D ParentTextureMip;
SamplerState ParentTextureMipSampler;

void HZBBuildPS
(
    float4 SvPosition : SV_POSITION, 
    out float4 OutColor : SV_Target0
)
{
   
#if FDimSceneDepth
    float2 UV = floor(SvPosition.xy) * float2(0.00390625, 0.0078125);
	#if UseSceneDepth
		float4 DeviceZ = ParentTextureMip.GatherRed(ParentTextureMipSampler, UV, 0);
		float FurthestDeviceZ = min(min(DeviceZ.x, DeviceZ.y), min(DeviceZ.z, DeviceZ.w));
	#else
	    float4 SceneDepth = ParentTextureMip.GatherAlpha(ParentTextureMipSampler, UV, 0);
		float FurthestSceneDepth = max(max(SceneDepth.x, SceneDepth.y), max(SceneDepth.z, SceneDepth.w));
		float FurthestDeviceZ = 1.f / ((FurthestSceneDepth + HZBInvDeviceZToWorldZTransform[3]) * HZBInvDeviceZToWorldZTransform[2]);
	#endif
#else	
	float4 DeviceZ;
	const uint2 PixelCoord = floor(SvPosition.xy) * 2;
    DeviceZ.x = ParentTextureMip.Load(int3(PixelCoord + int2(0, 0), 0));
    DeviceZ.y = ParentTextureMip.Load(int3(PixelCoord + int2(0, 1), 0));
    DeviceZ.z = ParentTextureMip.Load(int3(PixelCoord + int2(1, 0), 0));
    DeviceZ.w = ParentTextureMip.Load(int3(PixelCoord + int2(1, 1), 0));
	float FurthestDeviceZ = min(min(DeviceZ.x, DeviceZ.y), min(DeviceZ.z, DeviceZ.w));
	  
	//float4 DeviceZ = ParentTextureMip.GatherRed(ParentTextureMipSampler, UV, 0);
	//float FurthestDeviceZ = min(min(DeviceZ.x, DeviceZ.y), min(DeviceZ.z, DeviceZ.w));
#endif
	
    OutColor = FurthestDeviceZ;
}

#elif 1

#define GROUP_TILE_SIZE 8
groupshared float SharedFurthestDeviceZ[GROUP_TILE_SIZE][GROUP_TILE_SIZE];

//[Input]
float4 HZBInvDeviceZToWorldZTransform;
Texture2D ParentSceneTexture;
SamplerState ParentSceneTextureSampler;

//[OutPut]
RWStructuredBuffer<float> HzbStructuredBufferUAV_Zero;
[numthreads(GROUP_TILE_SIZE, GROUP_TILE_SIZE, 1)]
void HZBBuildCSLevelZero(
	uint2 GroupThreadIndex : SV_GroupThreadID, 
	uint2 DispatchThreadId : SV_DispatchThreadID)
{
    float2 UV = DispatchThreadId * float2(0.00390625, 0.0078125);
#if UseSceneDepth
	float4 DeviceZ = ParentSceneTexture.GatherRed(ParentSceneTextureSampler, UV, 0);
	float FurthestDeviceZ = min(min(DeviceZ.x, DeviceZ.y), min(DeviceZ.z, DeviceZ.w));
#else
    float4 SceneDepth = ParentSceneTexture.GatherAlpha(ParentSceneTextureSampler, UV, 0);
    float FurthestSceneDepth = max(max(SceneDepth.x, SceneDepth.y), max(SceneDepth.z, SceneDepth.w));
    float FurthestDeviceZ = 1.f / ((FurthestSceneDepth + HZBInvDeviceZToWorldZTransform[3]) * HZBInvDeviceZToWorldZTransform[2]);
#endif
	
    //uint GroupIndexX = GroupThreadIndex.x << 2;
    SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x] = FurthestDeviceZ; //Write to TGSM
    uint GlobalThreadIndex = DispatchThreadId.y << 8; // *256
    GlobalThreadIndex += DispatchThreadId.x;
    HzbStructuredBufferUAV_Zero[GlobalThreadIndex] = FurthestDeviceZ;
    GroupMemoryBarrierWithGroupSync();

    bool4 Result = (GroupThreadIndex.xyxy & uint4(1u, 1u, 3u, 3u)) == uint4(0, 0, 0, 0);
    
    bool DownSampleLevel_0 = Result.x && Result.y;
    if (DownSampleLevel_0)
    {
        float SharedDepth_0 = SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x];
        float SharedDepth_1 = SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x + 1];   
        float SharedDepth_2 = SharedFurthestDeviceZ[GroupThreadIndex.y + 1][GroupThreadIndex.x];
        float SharedDepth_3 = SharedFurthestDeviceZ[GroupThreadIndex.y + 1][GroupThreadIndex.x + 1];
        float FurthestDeviceZ_L1 = min(min(SharedDepth_0, SharedDepth_1), min(SharedDepth_2, SharedDepth_3));
        SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x] = FurthestDeviceZ_L1;
        
        uint2 GlobalThread_L1 = DispatchThreadId >> uint2(1u, 1u);
        uint BufferIndex = (GlobalThread_L1.y << 7) + GlobalThread_L1.x + 0x8000;
        HzbStructuredBufferUAV_Zero[BufferIndex] = FurthestDeviceZ_L1;
    }
    GroupMemoryBarrierWithGroupSync();

    bool DownSampleLevel_1 = Result.z && Result.w;
    if (DownSampleLevel_1)
    {
        float SharedDepth_0 = SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x];
        float SharedDepth_1 = SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x + 2];
        float SharedDepth_2 = SharedFurthestDeviceZ[GroupThreadIndex.y + 1][GroupThreadIndex.x];
        float SharedDepth_3 = SharedFurthestDeviceZ[GroupThreadIndex.y + 1][GroupThreadIndex.x + 2];
        float FurthestDeviceZ_L2 = min(min(SharedDepth_0, SharedDepth_1), min(SharedDepth_2, SharedDepth_3));
        SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x] = FurthestDeviceZ_L2;
        
        uint2 GlobalThread_L2 = DispatchThreadId >> uint2(2u, 2u);
        uint BufferIndex = (GlobalThread_L2.y << 6) + GlobalThread_L2.x + 0xA000;
        HzbStructuredBufferUAV_Zero[BufferIndex] = FurthestDeviceZ_L2;
    }
    GroupMemoryBarrierWithGroupSync();

    
    bool2 DownSampleLevel_2 = GroupThreadIndex.xy == uint2(0, 0);
    if (DownSampleLevel_2.x && DownSampleLevel_2.y)
    {
        float SharedDepth_0 = SharedFurthestDeviceZ[0][0];
        float SharedDepth_1 = SharedFurthestDeviceZ[0][4];
        float SharedDepth_2 = SharedFurthestDeviceZ[4][0];
        float SharedDepth_3 = SharedFurthestDeviceZ[4][4];
        float FurthestDeviceZ_L3 = min(min(SharedDepth_0, SharedDepth_1), min(SharedDepth_2, SharedDepth_3));
        
        uint2 GlobalThread_L3 = DispatchThreadId >> uint2(3u, 3u);
        uint BufferIndex = (GlobalThread_L3.y << 5) + GlobalThread_L3.x + 0xA800;
        HzbStructuredBufferUAV_Zero[BufferIndex] = FurthestDeviceZ_L3;
    }
}


//[OutPut]
RWStructuredBuffer<float> HzbStructuredBufferUAV_One;

[numthreads(GROUP_TILE_SIZE, GROUP_TILE_SIZE, 1)]
void HZBBuildCSLevelOne(
	uint2 GroupThreadIndex : SV_GroupThreadID,
	uint2 DispatchThreadId : SV_DispatchThreadID)
{
    uint2 ThreadIdBase = DispatchThreadId.xy << uint2(1u, 1u);
    uint GlobalIndexBase = (ThreadIdBase.y << 5) + 0xA800;
    
    //GetBufferIndex
    uint GlobalIndex_0 = GlobalIndexBase + ThreadIdBase.x;
    uint GlobalIndex_1 = GlobalIndexBase + ThreadIdBase.x + 1;
    uint GlobalIndex_2 = GlobalIndexBase + ThreadIdBase.x + 32;
    uint GlobalIndex_3 = GlobalIndexBase + ThreadIdBase.x + 33;
    
    float Depth_0 = HzbStructuredBufferUAV_One[GlobalIndex_0];
    float Depth_1 = HzbStructuredBufferUAV_One[GlobalIndex_1];
    float Depth_2 = HzbStructuredBufferUAV_One[GlobalIndex_2];
    float Depth_3 = HzbStructuredBufferUAV_One[GlobalIndex_3];
    float FurthestDeviceZ_L3 = min(min(Depth_0, Depth_1), min(Depth_2, Depth_3));
    
    uint BufferIndex_0 = (DispatchThreadId.y << 4) + DispatchThreadId.x + 0xAA00;
    HzbStructuredBufferUAV_One[BufferIndex_0] = FurthestDeviceZ_L3;
    
    SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x] = FurthestDeviceZ_L3;
    GroupMemoryBarrierWithGroupSync();
    
    bool4 Result = (GroupThreadIndex.xyxy & uint4(1u, 1u, 3u, 3u)) == uint4(0, 0, 0, 0);
    bool DownSampleLevel_0 = Result.x && Result.y;
    if (DownSampleLevel_0)
    {
        float SharedDepth_0 = SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x];
        float SharedDepth_1 = SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x + 1];
        float SharedDepth_2 = SharedFurthestDeviceZ[GroupThreadIndex.y + 1][GroupThreadIndex.x];
        float SharedDepth_3 = SharedFurthestDeviceZ[GroupThreadIndex.y + 1][GroupThreadIndex.x + 1];
        float FurthestDeviceZ_L1 = min(min(SharedDepth_0, SharedDepth_1), min(SharedDepth_2, SharedDepth_3));
        SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x] = FurthestDeviceZ_L1;
        
        uint2 GlobalThread_L1 = DispatchThreadId >> uint2(1u, 1u);
        uint BufferIndex = (GlobalThread_L1.y << 3) + GlobalThread_L1.x + 0xAA80;
        HzbStructuredBufferUAV_One[BufferIndex] = FurthestDeviceZ_L1;
    }
    GroupMemoryBarrierWithGroupSync();
    
    bool DownSampleLevel_1 = Result.z && Result.w;
    if (DownSampleLevel_1)
    {
        float SharedDepth_0 = SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x];
        float SharedDepth_1 = SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x + 2];
        float SharedDepth_2 = SharedFurthestDeviceZ[GroupThreadIndex.y + 1][GroupThreadIndex.x];
        float SharedDepth_3 = SharedFurthestDeviceZ[GroupThreadIndex.y + 1][GroupThreadIndex.x + 2];
        float FurthestDeviceZ_L2 = min(min(SharedDepth_0, SharedDepth_1), min(SharedDepth_2, SharedDepth_3));
        SharedFurthestDeviceZ[GroupThreadIndex.y][GroupThreadIndex.x] = FurthestDeviceZ_L2;
        
        uint2 GlobalThread_L2 = DispatchThreadId >> uint2(2u, 2u);
        uint BufferIndex = (GlobalThread_L2.y << 2) + GlobalThread_L2.x + 0xAAA0u;
        HzbStructuredBufferUAV_One[BufferIndex] = FurthestDeviceZ_L2;
    }
    GroupMemoryBarrierWithGroupSync();
    
    bool2 DownSampleLevel_2 = GroupThreadIndex.xy == uint2(0, 0);
    if (DownSampleLevel_2.x && DownSampleLevel_2.y)
    {
        float SharedDepth_0 = SharedFurthestDeviceZ[0][0];
        float SharedDepth_1 = SharedFurthestDeviceZ[0][4];
        float SharedDepth_2 = SharedFurthestDeviceZ[4][0];
        float SharedDepth_3 = SharedFurthestDeviceZ[4][4];
        float FurthestDeviceZ_L3 = min(min(SharedDepth_0, SharedDepth_1), min(SharedDepth_2, SharedDepth_3));
        
        uint2 GlobalThread_L3 = DispatchThreadId >> uint2(3u, 3u);
        uint BufferIndex = (GlobalThread_L3.y << 1) + GlobalThread_L3.x + 0xAAA8u;
        HzbStructuredBufferUAV_One[BufferIndex] = FurthestDeviceZ_L3;
    }
}
#endif